# PERSON 3: DASHBOARD & ANALYTICS MASTER üìä

## üìã ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡∏´‡∏•‡∏±‡∏Å
- Dashboard & Statistics
- Reports & Analytics
- Data Visualization (Charts)
- Export System (CSV, Excel)
- UI/UX Design & Polish
- Landing Page
- Frontend Integration

---

# üóìÔ∏è TIMELINE OVERVIEW

## PHASE 1: Single University System (Week 1-2)
- Week 1 (Day 1-7): Landing Page & Dashboard
- Week 2 (Day 8-14): Reports & Analytics

## PHASE 2: Template System (Week 3)
- Day 15-21: Subdomain & Theming

## PHASE 3: Advanced Features (Week 4)  
- Day 22-30: Notifications & Final Polish

---

# üìÖ WEEK 1 (8-14 ‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°): LANDING PAGE & DASHBOARD

## Day 1-3: Landing Page & Layout üé®

### Frontend Setup
```bash
# 1. Create React project with Vite
npm create vite@latest frontend -- --template react-swc
cd frontend

# 2. Install dependencies
npm install

# 3. Install UI libraries
npm install react-router-dom axios react-icons recharts react-hook-form

# 4. Install Tailwind CSS
npm install -D tailwindcss postcss autoprefixer
npx tailwindcss init -p

# 5. Additional libraries
npm install react-hot-toast date-fns

# 6. Create .env file
cat > .env << EOF
VITE_API_URL=http://localhost:5000/api
VITE_APP_NAME=Complaint System
EOF

# 7. Start development server
npm run dev
```

### Tailwind Configuration
```javascript
// tailwind.config.js
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {
      colors: {
        primary: {
          50: '#f0f9ff',
          100: '#e0f2fe',
          200: '#bae6fd',
          300: '#7dd3fc',
          400: '#38bdf8',
          500: '#0ea5e9',
          600: '#0284c7',
          700: '#0369a1',
          800: '#075985',
          900: '#0c4a6e',
        },
      },
    },
  },
  plugins: [],
}
```

### Index CSS
```css
/* src/index.css */
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-gray-50 text-gray-900;
  }
}

@layer components {
  .btn-primary {
    @apply px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-colors;
  }
  
  .btn-secondary {
    @apply px-4 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition-colors;
  }
  
  .card {
    @apply bg-white rounded-lg shadow-md p-6;
  }
  
  .input {
    @apply w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500;
  }
}
```

### Landing Page Component
```jsx
// src/pages/Landing.jsx
import { Link } from 'react-router-dom';
import { 
  FaExclamationCircle, 
  FaChartLine, 
  FaBell, 
  FaShieldAlt,
  FaRocket,
  FaUsers 
} from 'react-icons/fa';

export default function Landing() {
  return (
    <div className="min-h-screen">
      {/* Navbar */}
      <nav className="bg-white shadow-sm">
        <div className="container mx-auto px-4 py-4 flex justify-between items-center">
          <div className="flex items-center gap-2">
            <FaExclamationCircle className="text-primary-600 text-2xl" />
            <span className="text-xl font-bold">Complaint System</span>
          </div>
          <div className="flex gap-4">
            <Link to="/login" className="btn-secondary">
              Login
            </Link>
            <Link to="/register" className="btn-primary">
              Register
            </Link>
          </div>
        </div>
      </nav>

      {/* Hero Section */}
      <section className="bg-gradient-to-r from-primary-600 to-primary-800 text-white py-20">
        <div className="container mx-auto px-4 text-center">
          <h1 className="text-5xl font-bold mb-6">
            ‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
          </h1>
          <p className="text-xl mb-8 max-w-2xl mx-auto">
            ‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢ ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡∏ó‡∏µ‡πà‡∏ó‡∏∏‡∏Å‡πÄ‡∏ß‡∏•‡∏≤ 
            ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ö‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤
          </p>
          <div className="flex gap-4 justify-center">
            <Link to="/register" className="bg-white text-primary-600 px-8 py-3 rounded-lg text-lg font-semibold hover:bg-gray-100 transition-colors">
              ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
            </Link>
            <a href="#features" className="border-2 border-white px-8 py-3 rounded-lg text-lg font-semibold hover:bg-white/10 transition-colors">
              ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
            </a>
          </div>
        </div>
      </section>

      {/* Features Section */}
      <section id="features" className="py-20">
        <div className="container mx-auto px-4">
          <h2 className="text-4xl font-bold text-center mb-12">
            ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏î‡πà‡∏ô
          </h2>
          <div className="grid md:grid-cols-3 gap-8">
            <FeatureCard
              icon={<FaExclamationCircle />}
              title="‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏á‡πà‡∏≤‡∏¢‡πÜ"
              description="‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô"
            />
            <FeatureCard
              icon={<FaBell />}
              title="‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"
              description="‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏≤‡∏á Email ‡πÅ‡∏•‡∏∞ LINE ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á"
            />
            <FeatureCard
              icon={<FaChartLine />}
              title="Dashboard ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"
              description="‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏õ‡∏±‡∏ç‡∏´‡∏≤"
            />
            <FeatureCard
              icon={<FaUsers />}
              title="‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"
              description="‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"
            />
            <FeatureCard
              icon={<FaShieldAlt />}
              title="‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢"
              description="‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏π‡∏á"
            />
            <FeatureCard
              icon={<FaRocket />}
              title="‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢"
              description="‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå"
            />
          </div>
        </div>
      </section>

      {/* How It Works */}
      <section className="bg-gray-100 py-20">
        <div className="container mx-auto px-4">
          <h2 className="text-4xl font-bold text-center mb-12">
            ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
          </h2>
          <div className="max-w-4xl mx-auto">
            <Step
              number="1"
              title="‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å"
              description="‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì"
            />
            <Step
              number="2"
              title="‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô"
              description="‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û"
            />
            <Step
              number="3"
              title="‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"
              description="‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô"
            />
            <Step
              number="4"
              title="‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"
              description="‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"
            />
          </div>
        </div>
      </section>

      {/* Statistics */}
      <section className="py-20">
        <div className="container mx-auto px-4">
          <div className="grid md:grid-cols-4 gap-8 text-center">
            <StatCard number="1,000+" label="‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô" />
            <StatCard number="500+" label="‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô" />
            <StatCard number="95%" label="‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç" />
            <StatCard number="24h" label="‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢" />
          </div>
        </div>
      </section>

      {/* CTA Section */}
      <section className="bg-primary-600 text-white py-20">
        <div className="container mx-auto px-4 text-center">
          <h2 className="text-4xl font-bold mb-6">
            ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á?
          </h2>
          <p className="text-xl mb-8">
            ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ü‡∏£‡∏µ
          </p>
          <Link to="/register" className="bg-white text-primary-600 px-8 py-3 rounded-lg text-lg font-semibold hover:bg-gray-100 transition-colors inline-block">
            ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ü‡∏£‡∏µ
          </Link>
        </div>
      </section>

      {/* Footer */}
      <footer className="bg-gray-800 text-white py-8">
        <div className="container mx-auto px-4 text-center">
          <p>&copy; 2025 Complaint System. All rights reserved.</p>
        </div>
      </footer>
    </div>
  );
}

function FeatureCard({ icon, title, description }) {
  return (
    <div className="card text-center hover:shadow-lg transition-shadow">
      <div className="text-4xl text-primary-600 mb-4 flex justify-center">
        {icon}
      </div>
      <h3 className="text-xl font-bold mb-2">{title}</h3>
      <p className="text-gray-600">{description}</p>
    </div>
  );
}

function Step({ number, title, description }) {
  return (
    <div className="flex items-start gap-4 mb-8">
      <div className="bg-primary-600 text-white w-12 h-12 rounded-full flex items-center justify-center text-xl font-bold flex-shrink-0">
        {number}
      </div>
      <div>
        <h3 className="text-xl font-bold mb-2">{title}</h3>
        <p className="text-gray-600">{description}</p>
      </div>
    </div>
  );
}

function StatCard({ number, label }) {
  return (
    <div>
      <div className="text-4xl font-bold text-primary-600 mb-2">{number}</div>
      <div className="text-gray-600">{label}</div>
    </div>
  );
}
```

### Dashboard Layout
```jsx
// src/components/layout/DashboardLayout.jsx
import { Link, Outlet, useNavigate } from 'react-router-dom';
import { useState } from 'react';
import {
  FaHome,
  FaExclamationCircle,
  FaPlus,
  FaUsers,
  FaChartBar,
  FaBullhorn,
  FaCog,
  FaBars,
  FaTimes,
  FaBell,
  FaSignOutAlt
} from 'react-icons/fa';
import { useAuth } from '../../context/AuthContext';

export default function DashboardLayout() {
  const [sidebarOpen, setSidebarOpen] = useState(true);
  const { user, logout } = useAuth();
  const navigate = useNavigate();

  const handleLogout = () => {
    logout();
    navigate('/login');
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Navbar */}
      <nav className="bg-white shadow-sm fixed top-0 left-0 right-0 z-30">
        <div className="flex items-center justify-between px-4 py-3">
          <div className="flex items-center gap-4">
            <button
              onClick={() => setSidebarOpen(!sidebarOpen)}
              className="text-gray-600 hover:text-gray-900 lg:hidden"
            >
              {sidebarOpen ? <FaTimes size={24} /> : <FaBars size={24} />}
            </button>
            <Link to="/dashboard" className="flex items-center gap-2">
              <FaExclamationCircle className="text-primary-600 text-2xl" />
              <span className="text-xl font-bold">Complaint System</span>
            </Link>
          </div>

          <div className="flex items-center gap-4">
            {/* Notification Bell */}
            <button className="relative text-gray-600 hover:text-gray-900">
              <FaBell size={20} />
              <span className="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center">
                3
              </span>
            </button>

            {/* User Menu */}
            <div className="flex items-center gap-2">
              <div className="text-right">
                <div className="font-semibold text-sm">{user?.name}</div>
                <div className="text-xs text-gray-500 capitalize">{user?.role}</div>
              </div>
              <button
                onClick={handleLogout}
                className="text-gray-600 hover:text-red-600"
                title="Logout"
              >
                <FaSignOutAlt size={20} />
              </button>
            </div>
          </div>
        </div>
      </nav>

      <div className="flex pt-16">
        {/* Sidebar */}
        <aside
          className={`fixed lg:sticky top-16 left-0 h-[calc(100vh-4rem)] bg-white shadow-sm transition-transform duration-300 z-20 ${
            sidebarOpen ? 'translate-x-0' : '-translate-x-full lg:translate-x-0'
          }`}
          style={{ width: '250px' }}
        >
          <nav className="p-4">
            <ul className="space-y-2">
              <NavItem to="/dashboard" icon={<FaHome />} label="Dashboard" />
              <NavItem to="/complaints" icon={<FaExclamationCircle />} label="‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" />
              <NavItem to="/my-complaints" icon={<FaExclamationCircle />} label="‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô" />
              <NavItem to="/complaints/new" icon={<FaPlus />} label="‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏´‡∏°‡πà" />
              
              {user?.role === 'staff' && (
                <NavItem to="/assigned-complaints" icon={<FaExclamationCircle />} label="‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢" />
              )}

              {user?.role === 'admin' && (
                <>
                  <div className="pt-4 pb-2 text-xs font-semibold text-gray-500 uppercase">
                    Admin
                  </div>
                  <NavItem to="/admin/users" icon={<FaUsers />} label="‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" />
                  <NavItem to="/admin/reports" icon={<FaChartBar />} label="‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô" />
                  <NavItem to="/admin/announcements" icon={<FaBullhorn />} label="‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®" />
                  <NavItem to="/admin/settings" icon={<FaCog />} label="‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤" />
                </>
              )}
            </ul>
          </nav>
        </aside>

        {/* Main Content */}
        <main className="flex-1 p-6" style={{ marginLeft: sidebarOpen ? '0' : '-250px', transition: 'margin-left 0.3s' }}>
          <Outlet />
        </main>
      </div>

      {/* Mobile Overlay */}
      {sidebarOpen && (
        <div
          className="fixed inset-0 bg-black/50 z-10 lg:hidden"
          onClick={() => setSidebarOpen(false)}
        />
      )}
    </div>
  );
}

function NavItem({ to, icon, label }) {
  return (
    <li>
      <Link
        to={to}
        className="flex items-center gap-3 px-4 py-2 rounded-lg hover:bg-primary-50 hover:text-primary-600 transition-colors"
      >
        <span className="text-lg">{icon}</span>
        <span>{label}</span>
      </Link>
    </li>
  );
}
```

### Day 1-3 Checklist:
- [ ] Frontend project created (Vite + React)
- [ ] Tailwind CSS configured
- [ ] Landing page designed
- [ ] Hero section
- [ ] Features showcase
- [ ] How it works section
- [ ] Statistics section
- [ ] Footer
- [ ] Dashboard layout created
- [ ] Sidebar navigation
- [ ] Navbar with user menu
- [ ] Responsive design
- [ ] Mobile menu working
- [ ] Code committed

---

## Day 4-5: Dashboard Page üìà

### API Service Setup
```javascript
// src/services/api.js
import axios from 'axios';

const api = axios.create({
  baseURL: import.meta.env.VITE_API_URL,
  headers: {
    'Content-Type': 'application/json'
  }
});

// Add token to requests
api.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('token');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// Handle 401 errors
api.interceptors.response.use(
  (response) => response,
  (error) => {
    if (error.response?.status === 401) {
      localStorage.removeItem('token');
      window.location.href = '/login';
    }
    return Promise.reject(error);
  }
);

export default api;

// src/services/statsAPI.js
import api from './api';

export const getOverviewStats = async () => {
  const response = await api.get('/stats/overview');
  return response.data;
};

export const getTrendStats = async (period = '7days') => {
  const response = await api.get(`/stats/trends?period=${period}`);
  return response.data;
};

export const getLocationStats = async () => {
  const response = await api.get('/stats/by-location');
  return response.data;
};

export const getCategoryStats = async () => {
  const response = await api.get('/stats/by-category');
  return response.data;
};
```

### Statistics Backend Controller
```javascript
// src/controllers/statsController.js
const Complaint = require('../models/Complaint');

// @desc    Get overview statistics
// @route   GET /api/stats/overview
// @access  Private
exports.getOverviewStats = async (req, res) => {
  try {
    const query = {};
    
    if (req.tenant) {
      query.tenant_id = req.tenant._id;
    }

    // Total complaints
    const total = await Complaint.countDocuments(query);

    // By status
    const byStatus = await Complaint.aggregate([
      { $match: query },
      {
        $group: {
          _id: '$status',
          count: { $sum: 1 }
        }
      }
    ]);

    // By priority
    const byPriority = await Complaint.aggregate([
      { $match: query },
      {
        $group: {
          _id: '$priority',
          count: { $sum: 1 }
        }
      }
    ]);

    // By category (support multiple categories per complaint)
    const byCategory = await Complaint.aggregate([
      { $match: query },
      { $unwind: '$categories' },
      {
        $group: {
          _id: '$categories',
          count: { $sum: 1 }
        }
      },
      { $sort: { count: -1 } }
    ]);

    // Resolution rate
    const resolvedCount = await Complaint.countDocuments({
      ...query,
      status: 'resolved'
    });
    const resolutionRate = total > 0 ? (resolvedCount / total * 100).toFixed(1) : 0;

    // Average resolution time
    const resolvedComplaints = await Complaint.find({
      ...query,
      status: 'resolved',
      resolved_at: { $exists: true }
    }).select('created_at resolved_at');

    let avgResolutionTime = 0;
    if (resolvedComplaints.length > 0) {
      const totalTime = resolvedComplaints.reduce((sum, complaint) => {
        const time = complaint.resolved_at - complaint.created_at;
        return sum + time;
      }, 0);
      avgResolutionTime = Math.round(totalTime / resolvedComplaints.length / (1000 * 60 * 60)); // hours
    }

    res.json({
      success: true,
      data: {
        total_complaints: total,
        by_status: byStatus.reduce((acc, item) => {
          acc[item._id] = item.count;
          return acc;
        }, {}),
        by_priority: byPriority.reduce((acc, item) => {
          acc[item._id] = item.count;
          return acc;
        }, {}),
        by_category: byCategory,
        resolution_rate: parseFloat(resolutionRate),
        avg_resolution_time: avgResolutionTime
      }
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: 'Server error',
      error: error.message
    });
  }
};

// @desc    Get trend statistics
// @route   GET /api/stats/trends
// @access  Private
exports.getTrendStats = async (req, res) => {
  try {
    const { period = '7days' } = req.query;
    
    // Calculate start date based on period
    const periodMap = {
      '7days': 7,
      '30days': 30,
      '90days': 90
    };
    
    const days = periodMap[period] || 7;
    const startDate = new Date();
    startDate.setDate(startDate.getDate() - days);

    const query = {
      created_at: { $gte: startDate }
    };
    
    if (req.tenant) {
      query.tenant_id = req.tenant._id;
    }

    const trends = await Complaint.aggregate([
      { $match: query },
      {
        $group: {
          _id: {
            $dateToString: {
              format: '%Y-%m-%d',
              date: '$created_at'
            }
          },
          count: { $sum: 1 }
        }
      },
      { $sort: { _id: 1 } }
    ]);

    res.json({
      success: true,
      data: trends
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: 'Server error',
      error: error.message
    });
  }
};

// @desc    Get statistics by location
// @route   GET /api/stats/by-location
// @access  Private
exports.getLocationStats = async (req, res) => {
  try {
    const query = {};
    
    if (req.tenant) {
      query.tenant_id = req.tenant._id;
    }

    const stats = await Complaint.aggregate([
      { $match: query },
      {
        $group: {
          _id: '$location.building',
          count: { $sum: 1 }
        }
      },
      { $sort: { count: -1 } },
      { $limit: 10 }
    ]);

    res.json({
      success: true,
      data: stats
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: 'Server error',
      error: error.message
    });
  }
};

// @desc    Get staff performance
// @route   GET /api/stats/staff-performance
// @access  Private/Admin
exports.getStaffPerformance = async (req, res) => {
  try {
    const query = { assigned_to: { $exists: true } };
    
    if (req.tenant) {
      query.tenant_id = req.tenant._id;
    }

    const performance = await Complaint.aggregate([
      { $match: query },
      {
        $group: {
          _id: '$assigned_to',
          total_assigned: { $sum: 1 },
          resolved: {
            $sum: { $cond: [{ $eq: ['$status', 'resolved'] }, 1, 0] }
          }
        }
      },
      {
        $lookup: {
          from: 'users',
          localField: '_id',
          foreignField: '_id',
          as: 'staff'
        }
      },
      { $unwind: '$staff' },
      {
        $project: {
          name: '$staff.name',
          email: '$staff.email',
          total_assigned: 1,
          resolved: 1,
          resolution_rate: {
            $multiply: [
              { $divide: ['$resolved', '$total_assigned'] },
              100
            ]
          }
        }
      },
      { $sort: { resolved: -1 } }
    ]);

    res.json({
      success: true,
      data: performance
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: 'Server error',
      error: error.message
    });
  }
};
```

### Statistics Routes
```javascript
// src/routes/stats.js
const express = require('express');
const router = express.Router();
const {
  getOverviewStats,
  getTrendStats,
  getLocationStats,
  getStaffPerformance
} = require('../controllers/statsController');
const { authenticateUser, checkRole } = require('../middleware/auth');

router.use(authenticateUser);

router.get('/overview', getOverviewStats);
router.get('/trends', getTrendStats);
router.get('/by-location', getLocationStats);
router.get('/staff-performance', checkRole('admin'), getStaffPerformance);

module.exports = router;
```

### Dashboard Page Component
```jsx
// src/pages/Dashboard.jsx
import { useEffect, useState } from 'react';
import { FaExclamationCircle, FaClock, FaCheckCircle, FaBan } from 'react-icons/fa';
import { LineChart, Line, PieChart, Pie, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, Cell } from 'recharts';
import { getOverviewStats, getTrendStats, getLocationStats } from '../services/statsAPI';
import toast from 'react-hot-toast';

export default function Dashboard() {
  const [stats, setStats] = useState(null);
  const [trends, setTrends] = useState([]);
  const [locationStats, setLocationStats] = useState([]);
  const [loading, setLoading] = useState(true);
  const [period, setPeriod] = useState('7days');

  useEffect(() => {
    loadData();
  }, [period]);

  const loadData = async () => {
    try {
      setLoading(true);
      const [overviewData, trendData, locationData] = await Promise.all([
        getOverviewStats(),
        getTrendStats(period),
        getLocationStats()
      ]);

      setStats(overviewData.data);
      setTrends(trendData.data);
      setLocationStats(locationData.data);
    } catch (error) {
      toast.error('Failed to load dashboard data');
      console.error(error);
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600 mx-auto"></div>
          <p className="mt-4 text-gray-600">Loading dashboard...</p>
        </div>
      </div>
    );
  }

  const statusData = [
    { name: '‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£', value: stats?.by_status?.pending || 0, color: '#fbbf24' },
    { name: '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£', value: stats?.by_status?.in_progress || 0, color: '#3b82f6' },
    { name: '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß', value: stats?.by_status?.resolved || 0, color: '#10b981' },
    { name: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å', value: stats?.by_status?.cancelled || 0, color: '#ef4444' }
  ];

  const categoryData = stats?.by_category?.map(cat => ({
    name: cat._id,
    value: cat.count
  })) || [];

  const locationData = locationStats.map(loc => ({
    name: loc._id || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
    count: loc.count
  }));

  return (
    <div>
      {/* Page Header */}
      <div className="mb-6">
        <h1 className="text-3xl font-bold mb-2">Dashboard</h1>
        <p className="text-gray-600">‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</p>
      </div>

      {/* Stat Cards */}
      <div className="grid md:grid-cols-4 gap-6 mb-6">
        <StatCard
          icon={<FaExclamationCircle />}
          title="‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"
          value={stats?.total_complaints || 0}
          color="bg-blue-500"
        />
        <StatCard
          icon={<FaClock />}
          title="‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£"
          value={stats?.by_status?.pending || 0}
          color="bg-yellow-500"
        />
        <StatCard
          icon={<FaCheckCircle />}
          title="‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß"
          value={stats?.by_status?.resolved || 0}
          color="bg-green-500"
        />
        <StatCard
          icon={<FaBan />}
          title="‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"
          value={`${stats?.resolution_rate || 0}%`}
          color="bg-purple-500"
        />
      </div>

      {/* Charts Row 1 */}
      <div className="grid md:grid-cols-2 gap-6 mb-6">
        {/* Trend Chart */}
        <div className="card">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-bold">‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤</h2>
            <select
              value={period}
              onChange={(e) => setPeriod(e.target.value)}
              className="input w-auto"
            >
              <option value="7days">7 ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤</option>
              <option value="30days">30 ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤</option>
              <option value="90days">90 ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤</option>
            </select>
          </div>
          <ResponsiveContainer width="100%" height={300}>
            <LineChart data={trends}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="_id" />
              <YAxis />
              <Tooltip />
              <Legend />
              <Line type="monotone" dataKey="count" stroke="#0ea5e9" strokeWidth={2} name="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á" />
            </LineChart>
          </ResponsiveContainer>
        </div>

        {/* Status Pie Chart */}
        <div className="card">
          <h2 className="text-xl font-bold mb-4">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</h2>
          <ResponsiveContainer width="100%" height={300}>
            <PieChart>
              <Pie
                data={statusData}
                cx="50%"
                cy="50%"
                labelLine={false}
                label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}
                outerRadius={100}
                fill="#8884d8"
                dataKey="value"
              >
                {statusData.map((entry, index) => (
                  <Cell key={`cell-${index}`} fill={entry.color} />
                ))}
              </Pie>
              <Tooltip />
            </PieChart>
          </ResponsiveContainer>
        </div>
      </div>

      {/* Charts Row 2 */}
      <div className="grid md:grid-cols-2 gap-6">
        {/* Category Bar Chart */}
        <div className="card">
          <h2 className="text-xl font-bold mb-4">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</h2>
          <ResponsiveContainer width="100%" height={300}>
            <BarChart data={categoryData}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="name" />
              <YAxis />
              <Tooltip />
              <Legend />
              <Bar dataKey="value" fill="#0ea5e9" name="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á" />
            </BarChart>
          </ResponsiveContainer>
        </div>

        {/* Location Bar Chart */}
        <div className="card">
          <h2 className="text-xl font-bold mb-4">Top 10 ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î</h2>
          <ResponsiveContainer width="100%" height={300}>
            <BarChart data={locationData}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="name" />
              <YAxis />
              <Tooltip />
              <Legend />
              <Bar dataKey="count" fill="#f59e0b" name="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á" />
            </BarChart>
          </ResponsiveContainer>
        </div>
      </div>

      {/* Additional Info */}
      <div className="grid md:grid-cols-3 gap-6 mt-6">
        <InfoCard
          title="‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢"
          value={`${stats?.avg_resolution_time || 0} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á`}
          description="‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤"
        />
        <InfoCard
          title="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£"
          value={stats?.by_status?.in_progress || 0}
          description="‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£"
        />
        <InfoCard
          title="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"
          value={stats?.by_status?.cancelled || 0}
          description="‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"
        />
      </div>
    </div>
  );
}

function StatCard({ icon, title, value, color }) {
  return (
    <div className="card">
      <div className="flex items-center justify-between">
        <div>
          <p className="text-gray-600 text-sm mb-1">{title}</p>
          <p className="text-3xl font-bold">{value}</p>
        </div>
        <div className={`${color} text-white p-4 rounded-lg text-2xl`}>
          {icon}
        </div>
      </div>
    </div>
  );
}

function InfoCard({ title, value, description }) {
  return (
    <div className="card">
      <h3 className="text-lg font-semibold mb-2">{title}</h3>
      <p className="text-3xl font-bold text-primary-600 mb-2">{value}</p>
      <p className="text-sm text-gray-600">{description}</p>
    </div>
  );
}
```

### Day 4-5 Checklist:
- [ ] API service setup
- [ ] Axios interceptors configured
- [ ] Statistics backend endpoints
- [ ] Overview stats
- [ ] Trend stats
- [ ] Location stats
- [ ] Dashboard page created
- [ ] Stat cards component
- [ ] Line chart (trends)
- [ ] Pie chart (status)
- [ ] Bar charts (category, location)
- [ ] Period selector (7/30/90 days)
- [ ] Responsive charts
- [ ] Loading states
- [ ] Error handling
- [ ] Code committed

---

## Day 6-7: Complaint Detail & User Management üë•

### Complaint Detail Page
```jsx
// src/pages/ComplaintDetail.jsx
import { useEffect, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { FaArrowLeft, FaClock, FaUser, FaMapMarkerAlt, FaEdit, FaTrash } from 'react-icons/fa';
import { getComplaint, deleteComplaint } from '../services/complaintAPI';
import { getComments, addComment } from '../services/commentAPI';
import { getHistory } from '../services/historyAPI';
import toast from 'react-hot-toast';
import { format } from 'date-fns';

export default function ComplaintDetail() {
  const { id } = useParams();
  const navigate = useNavigate();
  const [complaint, setComplaint] = useState(null);
  const [comments, setComments] = useState([]);
  const [history, setHistory] = useState([]);
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState('details');
  const [newComment, setNewComment] = useState('');

  useEffect(() => {
    loadData();
  }, [id]);

  const loadData = async () => {
    try {
      setLoading(true);
      const [complaintData, commentsData, historyData] = await Promise.all([
        getComplaint(id),
        getComments(id),
        getHistory(id)
      ]);

      setComplaint(complaintData.data);
      setComments(commentsData.data);
      setHistory(historyData.data);
    } catch (error) {
      toast.error('Failed to load complaint details');
      console.error(error);
    } finally {
      setLoading(false);
    }
  };

  const handleAddComment = async (e) => {
    e.preventDefault();
    if (!newComment.trim()) return;

    try {
      await addComment(id, { comment: newComment });
      toast.success('Comment added');
      setNewComment('');
      loadData();
    } catch (error) {
      toast.error('Failed to add comment');
    }
  };

  const handleDelete = async () => {
    if (!confirm('Are you sure you want to delete this complaint?')) return;

    try {
      await deleteComplaint(id);
      toast.success('Complaint deleted');
      navigate('/my-complaints');
    } catch (error) {
      toast.error('Failed to delete complaint');
    }
  };

  if (loading) {
    return <div className="text-center py-8">Loading...</div>;
  }

  if (!complaint) {
    return <div className="text-center py-8">Complaint not found</div>;
  }

  return (
    <div>
      {/* Header */}
      <div className="mb-6 flex items-center justify-between">
        <div className="flex items-center gap-4">
          <button
            onClick={() => navigate(-1)}
            className="btn-secondary"
          >
            <FaArrowLeft />
          </button>
          <div>
            <h1 className="text-2xl font-bold">{complaint.title}</h1>
            <p className="text-gray-600">{complaint.complaint_number}</p>
          </div>
        </div>
        <div className="flex gap-2">
          <button className="btn-secondary">
            <FaEdit /> Edit
          </button>
          <button onClick={handleDelete} className="btn-secondary text-red-600">
            <FaTrash /> Delete
          </button>
        </div>
      </div>

      {/* Tabs */}
      <div className="border-b mb-6">
        <div className="flex gap-4">
          <TabButton
            active={activeTab === 'details'}
            onClick={() => setActiveTab('details')}
          >
            Details
          </TabButton>
          <TabButton
            active={activeTab === 'comments'}
            onClick={() => setActiveTab('comments')}
          >
            Comments ({comments.length})
          </TabButton>
          <TabButton
            active={activeTab === 'history'}
            onClick={() => setActiveTab('history')}
          >
            History
          </TabButton>
        </div>
      </div>

      {/* Content */}
      {activeTab === 'details' && (
        <div className="grid md:grid-cols-3 gap-6">
          {/* Main Content */}
          <div className="md:col-span-2 space-y-6">
            <div className="card">
              <h2 className="text-xl font-bold mb-4">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</h2>
              <p className="text-gray-700 whitespace-pre-wrap">{complaint.description}</p>
            </div>

            {complaint.images && complaint.images.length > 0 && (
              <div className="card">
                <h2 className="text-xl font-bold mb-4">‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û</h2>
                <div className="grid grid-cols-2 gap-4">
                  {complaint.images.map((img, index) => (
                    <img
                      key={index}
                      src={img}
                      alt={`Image ${index + 1}`}
                      className="rounded-lg w-full h-48 object-cover"
                    />
                  ))}
                </div>
              </div>
            )}
          </div>

          {/* Sidebar */}
          <div className="space-y-6">
            <div className="card">
              <h3 className="font-semibold mb-4">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ</h3>
              <InfoItem icon={<FaClock />} label="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞">
                <StatusBadge status={complaint.status} />
              </InfoItem>
              <InfoItem icon={<FaClock />} label="‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç">
                <PriorityBadge priority={complaint.priority} />
              </InfoItem>
              <InfoItem label="‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó">
                {complaint.categories.map((cat, i) => (
                  <span key={i} className="inline-block bg-gray-100 px-2 py-1 rounded text-sm mr-1">
                    {cat}
                  </span>
                ))}
              </InfoItem>
              <InfoItem icon={<FaMapMarkerAlt />} label="‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà">
                {complaint.location.building}, ‡∏ä‡∏±‡πâ‡∏ô {complaint.location.floor}
                {complaint.location.room && `, ‡∏´‡πâ‡∏≠‡∏á ${complaint.location.room}`}
              </InfoItem>
              <InfoItem icon={<FaUser />} label="‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á">
                {complaint.reporter_id.name}
              </InfoItem>
              {complaint.assigned_to && (
                <InfoItem icon={<FaUser />} label="‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö">
                  {complaint.assigned_to.name}
                </InfoItem>
              )}
              <InfoItem icon={<FaClock />} label="‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠">
                {format(new Date(complaint.created_at), 'dd/MM/yyyy HH:mm')}
              </InfoItem>
            </div>
          </div>
        </div>
      )}

      {activeTab === 'comments' && (
        <div className="max-w-3xl">
          <form onSubmit={handleAddComment} className="card mb-6">
            <textarea
              value={newComment}
              onChange={(e) => setNewComment(e.target.value)}
              placeholder="Add a comment..."
              className="input"
              rows="3"
            />
            <button type="submit" className="btn-primary mt-2">
              Post Comment
            </button>
          </form>

          <div className="space-y-4">
            {comments.map((comment) => (
              <div key={comment._id} className="card">
                <div className="flex items-start gap-3">
                  <div className="w-10 h-10 bg-primary-600 text-white rounded-full flex items-center justify-center font-bold">
                    {comment.user_id.name[0]}
                  </div>
                  <div className="flex-1">
                    <div className="flex items-center gap-2 mb-1">
                      <span className="font-semibold">{comment.user_id.name}</span>
                      <span className="text-sm text-gray-500">
                        {format(new Date(comment.created_at), 'dd/MM/yyyy HH:mm')}
                      </span>
                    </div>
                    <p className="text-gray-700">{comment.comment}</p>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {activeTab === 'history' && (
        <div className="max-w-3xl">
          <Timeline items={history} />
        </div>
      )}
    </div>
  );
}

function TabButton({ active, onClick, children }) {
  return (
    <button
      onClick={onClick}
      className={`px-4 py-2 border-b-2 transition-colors ${
        active
          ? 'border-primary-600 text-primary-600 font-semibold'
          : 'border-transparent text-gray-600 hover:text-gray-900'
      }`}
    >
      {children}
    </button>
  );
}

function InfoItem({ icon, label, children }) {
  return (
    <div className="flex items-start gap-3 py-2 border-b last:border-0">
      {icon && <span className="text-gray-400 mt-1">{icon}</span>}
      <div className="flex-1">
        <p className="text-sm text-gray-600">{label}</p>
        <div className="font-medium">{children}</div>
      </div>
    </div>
  );
}

function StatusBadge({ status }) {
  const styles = {
    pending: 'bg-yellow-100 text-yellow-800',
    in_progress: 'bg-blue-100 text-blue-800',
    resolved: 'bg-green-100 text-green-800',
    cancelled: 'bg-red-100 text-red-800'
  };

  const labels = {
    pending: '‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£',
    in_progress: '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£',
    resolved: '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß',
    cancelled: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'
  };

  return (
    <span className={`px-2 py-1 rounded text-sm ${styles[status]}`}>
      {labels[status]}
    </span>
  );
}

function PriorityBadge({ priority }) {
  const styles = {
    low: 'bg-gray-100 text-gray-800',
    medium: 'bg-yellow-100 text-yellow-800',
    high: 'bg-orange-100 text-orange-800',
    urgent: 'bg-red-100 text-red-800'
  };

  const labels = {
    low: '‡∏ï‡πà‡∏≥',
    medium: '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á',
    high: '‡∏™‡∏π‡∏á',
    urgent: '‡∏î‡πà‡∏ß‡∏ô‡∏°‡∏≤‡∏Å'
  };

  return (
    <span className={`px-2 py-1 rounded text-sm ${styles[priority]}`}>
      {labels[priority]}
    </span>
  );
}

function Timeline({ items }) {
  return (
    <div className="space-y-4">
      {items.map((item, index) => (
        <div key={item._id} className="flex gap-4">
          <div className="flex flex-col items-center">
            <div className="w-3 h-3 bg-primary-600 rounded-full"></div>
            {index < items.length - 1 && (
              <div className="w-0.5 h-full bg-gray-300"></div>
            )}
          </div>
          <div className="card flex-1 mb-4">
            <div className="flex items-start justify-between">
              <div>
                <p className="font-semibold">{item.action}</p>
                <p className="text-sm text-gray-600">
                  by {item.changed_by?.name || 'System'}
                </p>
              </div>
              <span className="text-sm text-gray-500">
                {format(new Date(item.created_at), 'dd/MM/yyyy HH:mm')}
              </span>
            </div>
            {item.comment && (
              <p className="mt-2 text-gray-700">{item.comment}</p>
            )}
          </div>
        </div>
      ))}
    </div>
  );
}
```

### User Management Page
```jsx
// src/pages/admin/UserManagement.jsx
import { useEffect, useState } from 'react';
import { FaPlus, FaEdit, FaTrash, FaSearch } from 'react-icons/fa';
import { getAllUsers, updateUserRole, toggleUserStatus } from '../services/userAPI';
import toast from 'react-hot-toast';

export default function UserManagement() {
  const [users, setUsers] = useState([]);
  const [loading, setLoading] = useState(true);
  const [search, setSearch] = useState('');
  const [roleFilter, setRoleFilter] = useState('');

  useEffect(() => {
    loadUsers();
  }, [roleFilter]);

  const loadUsers = async () => {
    try {
      setLoading(true);
      const params = {};
      if (roleFilter) params.role = roleFilter;
      if (search) params.search = search;

      const response = await getAllUsers(params);
      setUsers(response.data);
    } catch (error) {
      toast.error('Failed to load users');
    } finally {
      setLoading(false);
    }
  };

  const handleRoleChange = async (userId, newRole) => {
    try {
      await updateUserRole(userId, newRole);
      toast.success('Role updated');
      loadUsers();
    } catch (error) {
      toast.error('Failed to update role');
    }
  };

  const handleToggleStatus = async (userId) => {
    try {
      await toggleUserStatus(userId);
      toast.success('Status updated');
      loadUsers();
    } catch (error) {
      toast.error('Failed to update status');
    }
  };

  return (
    <div>
      <div className="mb-6 flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold">User Management</h1>
          <p className="text-gray-600">Manage system users and roles</p>
        </div>
        <button className="btn-primary">
          <FaPlus /> Add User
        </button>
      </div>

      {/* Filters */}
      <div className="card mb-6">
        <div className="grid md:grid-cols-3 gap-4">
          <div className="relative">
            <FaSearch className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400" />
            <input
              type="text"
              value={search}
              onChange={(e) => setSearch(e.target.value)}
              placeholder="Search users..."
              className="input pl-10"
            />
          </div>
          <select
            value={roleFilter}
            onChange={(e) => setRoleFilter(e.target.value)}
            className="input"
          >
            <option value="">All Roles</option>
            <option value="admin">Admin</option>
            <option value="staff">Staff</option>
            <option value="reporter">Reporter</option>
          </select>
          <button onClick={loadUsers} className="btn-primary">
            Search
          </button>
        </div>
      </div>

      {/* Users Table */}
      <div className="card overflow-x-auto">
        <table className="w-full">
          <thead className="bg-gray-50">
            <tr>
              <th className="px-4 py-3 text-left">Name</th>
              <th className="px-4 py-3 text-left">Email</th>
              <th className="px-4 py-3 text-left">Role</th>
              <th className="px-4 py-3 text-left">Status</th>
              <th className="px-4 py-3 text-left">Created</th>
              <th className="px-4 py-3 text-center">Actions</th>
            </tr>
          </thead>
          <tbody className="divide-y">
            {users.map((user) => (
              <tr key={user._id} className="hover:bg-gray-50">
                <td className="px-4 py-3 font-medium">{user.name}</td>
                <td className="px-4 py-3 text-gray-600">{user.email}</td>
                <td className="px-4 py-3">
                  <select
                    value={user.role}
                    onChange={(e) => handleRoleChange(user._id, e.target.value)}
                    className="input text-sm"
                  >
                    <option value="admin">Admin</option>
                    <option value="staff">Staff</option>
                    <option value="reporter">Reporter</option>
                  </select>
                </td>
                <td className="px-4 py-3">
                  <button
                    onClick={() => handleToggleStatus(user._id)}
                    className={`px-2 py-1 rounded text-sm ${
                      user.is_active
                        ? 'bg-green-100 text-green-800'
                        : 'bg-red-100 text-red-800'
                    }`}
                  >
                    {user.is_active ? 'Active' : 'Inactive'}
                  </button>
                </td>
                <td className="px-4 py-3 text-gray-600 text-sm">
                  {new Date(user.created_at).toLocaleDateString()}
                </td>
                <td className="px-4 py-3 text-center">
                  <button className="text-blue-600 hover:text-blue-800 mr-2">
                    <FaEdit />
                  </button>
                  <button className="text-red-600 hover:text-red-800">
                    <FaTrash />
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
}
```

### Day 6-7 Checklist:
- [ ] Complaint detail page created
- [ ] Tabs (details, comments, history)
- [ ] Image gallery
- [ ] Status and priority badges
- [ ] Comment section
- [ ] Add comment form
- [ ] History timeline
- [ ] Edit/Delete actions
- [ ] User management page
- [ ] User table with filters
- [ ] Role selector dropdown
- [ ] Toggle user status
- [ ] Search functionality
- [ ] Responsive design
- [ ] Code committed

---

# üìÖ WEEK 2 (15-21 ‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°): REPORTS & ANALYTICS

## Day 8-14: Reports & Export System üìÑ

### Export Backend Controller
```javascript
// src/controllers/exportController.js
const Complaint = require('../models/Complaint');
const json2csv = require('json2csv').parse;
const ExcelJS = require('exceljs');

// @desc    Export complaints to CSV
// @route   GET /api/export/complaints?format=csv
// @access  Private/Admin
exports.exportComplaints = async (req, res) => {
  try {
    const { format = 'csv', start_date, end_date } = req.query;

    const query = {};
    
    if (req.tenant) {
      query.tenant_id = req.tenant._id;
    }

    if (start_date || end_date) {
      query.created_at = {};
      if (start_date) {
        query.created_at.$gte = new Date(start_date);
      }
      if (end_date) {
        query.created_at.$lte = new Date(end_date);
      }
    }

    const complaints = await Complaint.find(query)
      .populate('reporter_id', 'name email')
      .populate('assigned_to', 'name')
      .sort({ created_at: -1 });

    if (format === 'csv') {
      const fields = [
        'complaint_number',
        'title',
        'description',
        'categories',
        'status',
        'priority',
        'location.building',
        'location.floor',
        'reporter_id.name',
        'assigned_to.name',
        'created_at',
        'resolved_at'
      ];

      const csv = json2csv(complaints, { fields });

      res.header('Content-Type', 'text/csv');
      res.header('Content-Disposition', 'attachment; filename=complaints.csv');
      res.send(csv);
    } else if (format === 'excel') {
      const workbook = new ExcelJS.Workbook();
      const worksheet = workbook.addWorksheet('Complaints');

      worksheet.columns = [
        { header: 'Complaint #', key: 'complaint_number', width: 15 },
        { header: 'Title', key: 'title', width: 30 },
        { header: 'Status', key: 'status', width: 15 },
        { header: 'Priority', key: 'priority', width: 12 },
        { header: 'Categories', key: 'categories', width: 20 },
        { header: 'Building', key: 'building', width: 15 },
        { header: 'Reporter', key: 'reporter', width: 20 },
        { header: 'Created At', key: 'created_at', width: 20 }
      ];

      complaints.forEach(complaint => {
        worksheet.addRow({
          complaint_number: complaint.complaint_number,
          title: complaint.title,
          status: complaint.status,
          priority: complaint.priority,
          categories: complaint.categories.join(', '),
          building: complaint.location.building,
          reporter: complaint.reporter_id?.name || 'N/A',
          created_at: complaint.created_at
        });
      });

      res.header('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
      res.header('Content-Disposition', 'attachment; filename=complaints.xlsx');

      await workbook.xlsx.write(res);
      res.end();
    }
  } catch (error) {
    res.status(500).json({
      success: false,
      message: 'Export error',
      error: error.message
    });
  }
};
```

### Reports Page
```jsx
// src/pages/admin/Reports.jsx
import { useState } from 'react';
import { FaFileExport, FaFilePdf, FaFileExcel, FaFileCsv } from 'react-icons/fa';
import { exportComplaints } from '../services/exportAPI';
import toast from 'react-hot-toast';

export default function Reports() {
  const [startDate, setStartDate] = useState('');
  const [endDate, setEndDate] = useState('');
  const [exporting, setExporting] = useState(false);

  const handleExport = async (format) => {
    try {
      setExporting(true);
      const params = {};
      if (startDate) params.start_date = startDate;
      if (endDate) params.end_date = endDate;
      params.format = format;

      await exportComplaints(params);
      toast.success(`Exported as ${format.toUpperCase()}`);
    } catch (error) {
      toast.error('Export failed');
    } finally {
      setExporting(false);
    }
  };

  return (
    <div>
      <div className="mb-6">
        <h1 className="text-3xl font-bold mb-2">Reports & Export</h1>
        <p className="text-gray-600">Generate and download reports</p>
      </div>

      {/* Date Range Filter */}
      <div className="card mb-6">
        <h2 className="text-xl font-bold mb-4">Select Date Range</h2>
        <div className="grid md:grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium mb-2">Start Date</label>
            <input
              type="date"
              value={startDate}
              onChange={(e) => setStartDate(e.target.value)}
              className="input"
            />
          </div>
          <div>
            <label className="block text-sm font-medium mb-2">End Date</label>
            <input
              type="date"
              value={endDate}
              onChange={(e) => setEndDate(e.target.value)}
              className="input"
            />
          </div>
        </div>
      </div>

      {/* Export Options */}
      <div className="grid md:grid-cols-3 gap-6">
        <ExportCard
          icon={<FaFileCsv />}
          title="Export to CSV"
          description="Download complaints data in CSV format"
          onClick={() => handleExport('csv')}
          disabled={exporting}
          color="text-green-600"
        />
        <ExportCard
          icon={<FaFileExcel />}
          title="Export to Excel"
          description="Download complaints data in Excel format"
          onClick={() => handleExport('excel')}
          disabled={exporting}
          color="text-blue-600"
        />
        <ExportCard
          icon={<FaFilePdf />}
          title="Generate PDF Report"
          description="Create a PDF report with charts and summaries"
          onClick={() => toast.info('Coming soon')}
          disabled={true}
          color="text-red-600"
        />
      </div>
    </div>
  );
}

function ExportCard({ icon, title, description, onClick, disabled, color }) {
  return (
    <div className="card hover:shadow-lg transition-shadow">
      <div className={`text-4xl ${color} mb-4`}>{icon}</div>
      <h3 className="text-xl font-bold mb-2">{title}</h3>
      <p className="text-gray-600 mb-4">{description}</p>
      <button
        onClick={onClick}
        disabled={disabled}
        className="btn-primary w-full"
      >
        <FaFileExport /> Export
      </button>
    </div>
  );
}
```

### Day 8-14 Checklist:
- [ ] Export backend controller
- [ ] CSV export
- [ ] Excel export (ExcelJS)
- [ ] Export routes
- [ ] Reports page created
- [ ] Date range selector
- [ ] Export buttons (CSV, Excel)
- [ ] Loading states
- [ ] File download working
- [ ] Error handling
- [ ] Final testing
- [ ] All features working
- [ ] Code committed

---

# üìÖ PHASE 2 & 3: THEMING & FINAL POLISH

## Day 15-30: Complete All Remaining Features ‚ú®

### Day 15-21 Checklist (Phase 2):
- [ ] Tenant context created
- [ ] Theme provider setup
- [ ] Dynamic color application
- [ ] Logo display
- [ ] Subdomain detection
- [ ] Multi-tenant UI tested

### Day 22-27 Checklist (Phase 3):
- [ ] Notification center UI
- [ ] Notification dropdown
- [ ] Mark as read functionality
- [ ] Real-time updates (polling)
- [ ] Announcement list page
- [ ] Announcement detail page

### Day 28-30 Final Checklist:
- [ ] All pages responsive
- [ ] Mobile navigation working
- [ ] Loading animations
- [ ] Error boundaries
- [ ] Empty states
- [ ] Success messages
- [ ] Accessibility (ARIA labels)
- [ ] Performance optimized
- [ ] All bugs fixed
- [ ] Code cleaned up
- [ ] Documentation complete
- [ ] Ready for presentation!

---

# üéØ YOUR KEY DELIVERABLES

## Week 1:
‚úÖ Landing page with hero section
‚úÖ Dashboard layout (navbar + sidebar)
‚úÖ Dashboard with charts
‚úÖ Stat cards
‚úÖ Line/Pie/Bar charts (Recharts)
‚úÖ Complaint detail page
‚úÖ User management page

## Week 2:
‚úÖ Reports page
‚úÖ Export system (CSV, Excel)
‚úÖ Advanced analytics
‚úÖ Staff performance metrics

## Week 3:
‚úÖ Multi-tenant theming
‚úÖ Dynamic branding
‚úÖ Responsive design

## Week 4:
‚úÖ Notification UI
‚úÖ Announcement pages
‚úÖ Final polish
‚úÖ Presentation ready!

---

# üìû IMPORTANT NOTES

## Your Focus Areas:
1. **UI/UX** - Beautiful, intuitive design
2. **Dashboard** - Clear data visualization
3. **Charts** - Recharts integration
4. **Reports** - Export functionality
5. **Responsive** - Mobile-friendly
6. **Polish** - Smooth animations, loading states

## Collaborate With:
- **Person 1**: Auth API, user data
- **Person 2**: Complaint API, stats data

## Design Principles:
- Keep it simple and clean
- Use consistent spacing
- Add loading states everywhere
- Handle errors gracefully
- Make it mobile-friendly
- Add smooth transitions
- Use icons effectively

---

# üöÄ YOU GOT THIS!

**Good luck! ‡πÉ‡∏´‡πâ‡∏™‡∏π‡πâ‡πÜ‡∏ô‡∏∞! üí™**

UI/UX ‡∏Ñ‡∏∑‡∏≠‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏´‡πá‡∏ô
‡∏ñ‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏≤‡∏î‡∏µ ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢ ‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏î‡∏π‡πÄ‡∏à‡πã‡∏á‡∏°‡∏≤‡∏Å! üé®‚ú®